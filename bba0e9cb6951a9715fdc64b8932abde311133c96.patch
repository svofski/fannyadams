From bba0e9cb6951a9715fdc64b8932abde311133c96 Mon Sep 17 00:00:00 2001
From: austin <austin@austin-linux.(none)>
Date: Fri, 16 Nov 2012 13:45:35 -0800
Subject: [PATCH] Added I2S, USB Audio, and Isochronous IN USB xfer

Added I2S enable and disable commands.
Added USB audio class descriptors and related functions.
Added Isochronous IN USB transfer functionality.
---
 include/libopencm3/stm32/common/spi_common_all.h |   7 +-
 include/libopencm3/stm32/otg_hs.h                |   8 +-
 include/libopencm3/stm32/spi.h                   |   1 -
 include/libopencm3/usb/usbd.h                    |   3 +
 include/libopencm3/usb/usbstd.h                  | 110 ++++++++++++++++++++++-
 lib/stm32/common/i2c_common_all.c                |   2 +-
 lib/stm32/common/spi_common_all.c                |  96 ++++++++++++++++++++
 lib/usb/usb_fx07_common.c                        |  15 +++-
 lib/usb/usb_private.h                            |   7 ++
 lib/usb/usb_standard.c                           |  55 ++++++++----
 10 files changed, 280 insertions(+), 24 deletions(-)

diff --git a/include/libopencm3/stm32/common/spi_common_all.h b/include/libopencm3/stm32/common/spi_common_all.h
index 976d679..e17c1f8 100644
--- a/include/libopencm3/stm32/common/spi_common_all.h
+++ b/include/libopencm3/stm32/common/spi_common_all.h
@@ -350,7 +350,6 @@ void spi_reset(u32 spi_peripheral);
 int spi_init_master(u32 spi, u32 br, u32 cpol, u32 cpha, u32 dff, u32 lsbfirst);
 void spi_enable(u32 spi);
 void spi_disable(u32 spi);
-u16 spi_clean_disable(u32 spi);
 void spi_write(u32 spi, u16 data);
 void spi_send(u32 spi, u16 data);
 u16 spi_read(u32 spi);
@@ -392,6 +391,12 @@ void spi_enable_tx_dma(u32 spi);
 void spi_disable_tx_dma(u32 spi);
 void spi_enable_rx_dma(u32 spi);
 void spi_disable_rx_dma(u32 spi);
+u16 spi_clean_disable(u32 spi);
+void i2s_set_baud(u32 spi, u32 mck_enable, u32 odd, u32 div);
+void i2s_init(u32 spi, u32 standard, u32 pcmsync, u32 data_length,
+	u32 ck_polarity, u32 channel_length, u32 mode);
+void i2s_enable(u32 spi);
+void i2s_disable(u32 spi);
 
 END_DECLS
 
diff --git a/include/libopencm3/stm32/otg_hs.h b/include/libopencm3/stm32/otg_hs.h
index 2f59ddd..8b8b3f2 100644
--- a/include/libopencm3/stm32/otg_hs.h
+++ b/include/libopencm3/stm32/otg_hs.h
@@ -343,7 +343,8 @@
 /* OTG_FS Device Control OUT Endpoint 0 Control Register (OTG_HS_DOEPCTL0) */
 #define OTG_HS_DOEPCTL0_EPENA		(1 << 31)
 #define OTG_HS_DOEPCTL0_EPDIS		(1 << 30)
-/* Bits 29:28 - Reserved */
+#define OTG_HS_DOEPCTLX_SETODDFRM	(1 << 29)
+#define OTG_HS_DOEPCTLX_SEVNFRM		(1 << 28) /* Name in ISOC context */
 #define OTG_HS_DOEPCTLX_SD0PID		(1 << 28)
 #define OTG_HS_DOEPCTL0_SNAK		(1 << 27)
 #define OTG_HS_DOEPCTL0_CNAK		(1 << 26)
@@ -351,6 +352,7 @@
 #define OTG_HS_DOEPCTL0_STALL		(1 << 21)
 #define OTG_HS_DOEPCTL0_SNPM		(1 << 20)
 #define OTG_HS_DOEPCTL0_EPTYP_MASK	(0x3 << 18)
+#define OTG_HS_DOEOCTL0_EPTYPE_ISOC 	(1 << 18)
 #define OTG_HS_DOEPCTL0_NAKSTS		(1 << 17)
 /* Bit 16 - Reserved */
 #define OTG_HS_DOEPCTL0_USBAEP		(1 << 15)
@@ -361,6 +363,10 @@
 #define OTG_HS_DOEPCTL0_MPSIZ_16	(0x2 << 0)
 #define OTG_HS_DOEPCTL0_MPSIZ_8		(0x3 << 0)
 
+/* Mask for removing frame bits from register for ISOC handling */
+#define OTG_HS_DOEPCTL0_RM_FRM_MSK 	0xCFFFFFFF
+#define FNSOF_MASK 			(0x1 << 8)
+
 /* OTG_FS Device IN Endpoint Interrupt Register (OTG_HS_DIEPINTx) */
 /* Bits 31:8 - Reserved */
 #define OTG_HS_DIEPINTX_TXFE		(1 << 7)
diff --git a/include/libopencm3/stm32/spi.h b/include/libopencm3/stm32/spi.h
index 28aadd1..5965a84 100644
--- a/include/libopencm3/stm32/spi.h
+++ b/include/libopencm3/stm32/spi.h
@@ -28,4 +28,3 @@
 #else
 #       error "stm32 family not defined."
 #endif
-
diff --git a/include/libopencm3/usb/usbd.h b/include/libopencm3/usb/usbd.h
index 2e5b7fb..2ffb8ee 100644
--- a/include/libopencm3/usb/usbd.h
+++ b/include/libopencm3/usb/usbd.h
@@ -76,6 +76,9 @@ extern int usbd_register_control_callback(usbd_device *usbd_dev, u8 type,
 extern void usbd_register_set_config_callback(usbd_device *usbd_dev,
 		void (*callback)(usbd_device *usbd_dev, u16 wValue));
 
+extern void usbd_register_set_altsetting_callback(usbd_device *usbd_dev,
+						  void (*callback)(usbd_device *usbd_dev, u16 wIndex, u16 wValue));
+
 /* Functions to be provided by the hardware abstraction layer */
 extern void usbd_poll(usbd_device *usbd_dev);
 extern void usbd_disconnect(usbd_device *usbd_dev, bool disconnected);
diff --git a/include/libopencm3/usb/usbstd.h b/include/libopencm3/usb/usbstd.h
index 7908280..c7d232b 100644
--- a/include/libopencm3/usb/usbstd.h
+++ b/include/libopencm3/usb/usbstd.h
@@ -139,8 +139,9 @@ struct usb_config_descriptor {
 	u8 bMaxPower;
 
 	/* Descriptor ends here.  The following are used internally: */
-	const struct usb_interface {
-		int num_altsetting;
+	struct usb_interface {
+		u8 cur_altsetting;
+		u8 num_altsetting;
 		const struct usb_iface_assoc_descriptor *iface_assoc;
 		const struct usb_interface_descriptor *altsetting;
 	} *interface;
@@ -182,9 +183,26 @@ struct usb_endpoint_descriptor {
 	u8 bmAttributes;
 	u16 wMaxPacketSize;
 	u8 bInterval;
+	const void *append;
+	const void *extra;
+	int extralen;
 } __attribute__((packed));
 #define USB_DT_ENDPOINT_SIZE		sizeof(struct usb_endpoint_descriptor)
 
+/* USB ISOC Endpoint Descriptor - Table 9-13 */
+struct usb_isoc_endpoint_descriptor {
+	u8 bLength;
+	u8 bDescriptorType;
+	u8 bEndpointAddress;
+	u8 bmAttributes;
+	u16 wMaxPacketSize;
+	u8 bInterval;
+	u8 bRefresh;
+	u8 bSynchAddress;
+	const void *extra;
+	int extralen;
+} __attribute__((packed));
+
 /* USB Endpoint Descriptor bmAttributes bit definitions */
 #define USB_ENDPOINT_ATTR_CONTROL		0x00
 #define USB_ENDPOINT_ATTR_ISOCHRONOUS		0x01
@@ -220,10 +238,98 @@ struct usb_iface_assoc_descriptor {
 	u8 bFunctionProtocol;
 	u8 iFunction;
 } __attribute__((packed));
+
 #define USB_DT_INTERFACE_ASSOCIATION_SIZE \
 				sizeof(struct usb_iface_assoc_descriptor)
 
 enum usb_language_id {
 	USB_LANGID_ENGLISH_US = 0x409,
 };
+
+/* Interface Header Audio Class descriptor */
+
+struct usb_audio_class_header_descriptor {
+	u8 bLength;
+	u8 bDescriptorType;
+	u8 bDescriptorSubType;
+	u16 bcdADC;
+	u16 wTotalLength;
+	u8 bInCollection;
+	u8 baInterfaceNr;
+} __attribute__((packed));
+
+#define USB_AUDIO_HEADER_SIZE \
+	sizeof(struct usb_audio_class_header_descriptor)
+
+/* Input Terminal Audio Class descriptor */
+struct usb_audio_class_input_terminal_descriptor {
+	u8 bLength;
+	u8 bDescriptorType;
+	u8 bDescriptorSubType;
+	u8 bTerminalID;
+	u16 wTerminalType;
+	u8 bAssocTerminal;
+	u8 bNrChannels;
+	u16 wChannelConfig;
+	u8 iChannelNames;
+	u8 iTerminal;
+} __attribute__((packed));
+
+#define USB_INPUT_TERMINAL_SIZE \
+	sizeof(struct usb_audio_class_input_terminal_descriptor)
+
+/* Output Terminal Audio Class descriptor */
+struct usb_audio_class_output_terminal_descriptor {
+	u8 bLength;
+	u8 bDescriptorType;
+	u8 bDescriptorSubtype;
+	u8 bTerminalID;
+	u16 wTerminalType;
+	u8 bAssocTerminal;
+	u8 bSourceID;
+	u8 iTerminal;
+} __attribute__((packed));
+
+#define USB_OUTPUT_TERMINAL_SIZE \
+	        sizeof(struct usb_audio_class_output_terminal_descriptor)
+
+/*  USB Format Type Descriptor */
+struct usb_format_type_descriptor {
+	u8 bLength;
+	u8 bDescriptorType;
+	u8 bDescriptorSubtype;
+	u8 bFormatType;
+	u8 bNrChannels;
+	u8 bSubframeSize;
+	u8 bBitResolution;
+	u8 bSamFreqType;
+	u8 tSamFreq[3];
+} __attribute__((packed));
+
+#define USB_AUDIO_FORMAT_SIZE \
+	sizeof(struct usb_microphone_type_1_format_type_descriptor)
+
+/*Class-specific Isoc. Audio Data Endpoint Descriptor*/
+struct usb_audio_isoc_descriptor {
+	u8 bLength;
+	u8 bDescriptorType;
+	u8 bDescriptorSubtype;
+	u8 bmAttributes;
+	u8 bLockDelayUnits;
+	u16 wLockDelay;
+} __attribute__((packed));
+
+#define USB_AUDIO_ISOC_SIZE \
+	sizeof(struct usb_audio_isoc_descriptor)
+
+/*Class-specific AS General Interface Descriptor */
+struct usb_class_as_general_interface_descriptor {
+	u8 bLength;
+	u8 bDescriptorType;
+	u8 bDescriptorSubtype;
+	u8 bTerminalLink;
+	u8 bDelay;
+	u16 wFormatTag;
+} __attribute__((packed));
+
 #endif
diff --git a/lib/stm32/common/i2c_common_all.c b/lib/stm32/common/i2c_common_all.c
index 28ae199..12e243b 100644
--- a/lib/stm32/common/i2c_common_all.c
+++ b/lib/stm32/common/i2c_common_all.c
@@ -282,7 +282,7 @@ void i2c_send_data(u32 i2c, u8 data)
 
 @param[in] i2c Unsigned int32. I2C register base address @ref i2c_reg_base.
 */
-uint8_t i2c_get_data(u32 i2c)
+u8 i2c_get_data(u32 i2c)
 {
 	return I2C_DR(i2c) & 0xff;
 }
diff --git a/lib/stm32/common/spi_common_all.c b/lib/stm32/common/spi_common_all.c
index 184654e..7ab7837 100644
--- a/lib/stm32/common/spi_common_all.c
+++ b/lib/stm32/common/spi_common_all.c
@@ -140,6 +140,99 @@ int spi_init_master(u32 spi, u32 br, u32 cpol, u32 cpha, u32 dff, u32 lsbfirst)
 
 	return 0; /* TODO */
 }
+/*-----------------------------------------------------------------------------*/
+/** @brief Set baud rate for I2S module.
+ *
+ * This function sets the baud rate for the I2S module and controls the presence
+ * of MCLK.
+ *
+ * @param[in] spi Unsigned int32. SPI peripheral identifier @ref spi_reg_base.
+ * @param[in] mck_enable Unsigned int32. Is 0 or 1 @ref mckoe
+ * @param[in] odd Unsigned int32. real divider is 2*div+odd (0 or 1). @ref odd
+ * @param[in] div Unsigned int32. divider for i2s. 0 and 1 are forbidden @ref i2sdiv
+ * */
+
+void i2s_set_baud(u32 spi, u32 mck_enable, u32 odd, u32 div)
+{
+	u32 reg = 0;
+	reg |= mck_enable;
+	reg |= odd;
+	reg |= div;
+	SPI_I2SPR(spi) = reg;
+}
+
+/*-----------------------------------------------------------------------------*/
+/** @brief Configure the I2S module.
+ *
+ * The SPI peripheral is configured as a master with communication parameters
+ * baudrate, data format 8/16 bits, frame format lsb/msb first, clock polarity
+ * and phase. The SPI enable, CRC enable and CRC next controls are not affected.
+ * These must be controlled separately.
+ *
+ * @param[in] spi Unsigned int32. SPI peripheral identifier @ref spi_reg_base.
+ * @param[in] pcmsync short or long synchonization frames (only matters for PCM
+ * 	mode)  @ref pcmsync
+ * @param[in] data_length Unsigned int32. Data length (16,24,32bit) @ref datlen.
+ * @param[in] ck_polarity Unsigned int32. Clock polarity @ref ckpol.
+ * @param[in] channel_length Unsigned int32. bits per channel (16 or 32bit)
+ * 	@ref chlen.
+ * @param[in] mode Unsigned int32. Mode: master or slave, transmit or recieve
+ * 	@ref i2scfg.
+ * @returns int. Error code.
+ * */
+
+void i2s_init(u32 spi, u32 standard, u32 pcmsync, u32 data_length,
+		u32 ck_polarity, u32 channel_length, u32 mode)
+{
+	u32 reg = 0;
+	reg |= channel_length;
+	reg |= data_length << SPI_I2SCFGR_DATLEN_LSB;
+	reg |= ck_polarity;
+	reg |= standard << SPI_I2SCFGR_I2SSTD_LSB;
+	reg |= pcmsync;
+	reg |= mode << SPI_I2SCFGR_I2SCFG_LSB;
+	reg |= SPI_I2SCFGR_I2SMOD; /*select i2s, not spi*/
+	SPI_I2SCFGR(spi) = reg;
+}
+
+/*-----------------------------------------------------------------------------*/
+/** @brief SPI Enable.
+ *
+ * The I2S peripheral is enabled.
+ *
+ * @todo Error handling?
+ *
+ * @param[in] spi Unsigned int32. SPI peripheral identifier @ref spi_reg_base.
+ * */
+
+void i2s_enable(u32 spi)
+{
+	u32 reg = SPI_I2SCFGR(spi);
+	reg |= SPI_I2SCFGR_I2SE;
+	SPI_I2SCFGR(spi) = reg;
+}
+
+/*-----------------------------------------------------------------------------*/
+/** @brief SPI Enable.
+ *
+ * The I2S peripheral is disabled.
+ *
+ * @todo Error handling?
+ *
+ * @param[in] spi Unsigned int32. SPI peripheral identifier @ref spi_reg_base.
+ * */
+
+void i2s_disable(u32 spi)
+{
+	u32 reg = SPI_SR(spi);
+	/* it is mandatory to wait for TXE = 1 and BSY = 0 */
+	if ((reg & SPI_SR_TXE)&&((reg & SPI_SR_BSY) == 0)) {
+
+	reg = SPI_I2SCFGR(spi);
+	reg &= 0b011111111111;
+	SPI_I2SCFGR(spi) = reg;
+	}
+}
 
 /* TODO: Error handling? */
 /*-----------------------------------------------------------------------------*/
@@ -163,6 +256,9 @@ void spi_enable(u32 spi)
 
 The SPI peripheral is disabled.
 
+@todo  Follow procedure from section 23.3.8 in the TRM.
+(possibly create a "clean disable" function separately)
+
 @param[in] spi Unsigned int32. SPI peripheral identifier @ref spi_reg_base.
 */
 
diff --git a/lib/usb/usb_fx07_common.c b/lib/usb/usb_fx07_common.c
index 9178092..0571346 100644
--- a/lib/usb/usb_fx07_common.c
+++ b/lib/usb/usb_fx07_common.c
@@ -89,8 +89,7 @@ void stm32fx07_ep_setup(usbd_device *usbd_dev, u8 addr, u8 type, u16 max_size,
 		    (max_size & OTG_FS_DIEPSIZ0_XFRSIZ_MASK);
 		REBASE(OTG_DIEPCTL(addr)) |=
 		    OTG_FS_DIEPCTL0_EPENA | OTG_FS_DIEPCTL0_SNAK | (type << 18)
-		    | OTG_FS_DIEPCTL0_USBAEP | OTG_FS_DIEPCTLX_SD0PID
-		    | (addr << 22) | max_size;
+		    | OTG_FS_DIEPCTL0_USBAEP | (addr << 22) | max_size;
 
 		if (callback) {
 			usbd_dev->user_callback_ctr[addr][USB_TRANSACTION_IN] =
@@ -177,13 +176,23 @@ u16 stm32fx07_ep_write_packet(usbd_device *usbd_dev, u8 addr,
 {
 	const u32 *buf32 = buf;
 	int i;
-
 	addr &= 0x7F;
 
 	/* Return if endpoint is already enabled. */
 	if (REBASE(OTG_DIEPTSIZ(addr)) & OTG_FS_DIEPSIZ0_PKTCNT)
 		return 0;
 
+	if ( REBASE(OTG_DIEPCTL(addr)) & OTG_HS_DOEOCTL0_EPTYPE_ISOC) {
+		REBASE(OTG_DIEPCTL(addr)) &= OTG_HS_DOEPCTL0_RM_FRM_MSK;
+		if (REBASE(OTG_DSTS)&FNSOF_MASK) {
+			REBASE(OTG_DIEPCTL(addr)) |= OTG_HS_DOEPCTLX_SEVNFRM;
+		} else {
+			REBASE(OTG_DIEPCTL(addr)) |= OTG_HS_DOEPCTLX_SETODDFRM;
+		}
+	} else {
+		REBASE(OTG_DIEPCTL(addr)) |= OTG_HS_DOEPCTLX_SD0PID;
+	}
+
 	/* Enable endpoint for transmission. */
 	REBASE(OTG_DIEPTSIZ(addr)) = OTG_FS_DIEPSIZ0_PKTCNT | len;
 	REBASE(OTG_DIEPCTL(addr)) |= OTG_FS_DIEPCTL0_EPENA |
diff --git a/lib/usb/usb_private.h b/lib/usb/usb_private.h
index 9623675..5fa1c19 100644
--- a/lib/usb/usb_private.h
+++ b/lib/usb/usb_private.h
@@ -69,6 +69,13 @@ struct _usbd_device {
 	/* User callback function for some standard USB function hooks */
 	void (*user_callback_set_config)(usbd_device *usbd_dev, u16 wValue);
 
+	void (*user_callback_set_altsetting)(usbd_device *usbd_dev,
+			u16 wIndex, u16 wValue);
+	void (*user_callback_class)(usbd_device *usbd_dev, u16 bmRequestType,
+			u8 bRequest, u16 wValue, u16 wLength);
+        void (*user_callback_vendor)(usbd_device *usbd_dev, u16 bmRequestType,
+			u8 bRequest, u16 wValue, u16 wLength);
+
 	const struct _usbd_driver *driver;
 
 	/* private driver data */
diff --git a/lib/usb/usb_standard.c b/lib/usb/usb_standard.c
index e14fee3..779558a 100644
--- a/lib/usb/usb_standard.c
+++ b/lib/usb/usb_standard.c
@@ -28,11 +28,18 @@ void usbd_register_set_config_callback(usbd_device *usbd_dev,
 	usbd_dev->user_callback_set_config = callback;
 }
 
+void usbd_register_set_altsetting_callback(usbd_device *usbd_dev,
+					   void (*callback)(usbd_device *usbd_dev,
+							    u16 wIndex, u16 wValue))
+{
+	usbd_dev->user_callback_set_altsetting = callback;
+}
+
 static u16 build_config_descriptor(usbd_device *usbd_dev,
-				   u8 index, u8 *buf, u16 len)
+				   u8 idx, u8 *buf, u16 len)
 {
 	u8 *tmpbuf = buf;
-	const struct usb_config_descriptor *cfg = &usbd_dev->config[index];
+	const struct usb_config_descriptor *cfg = &usbd_dev->config[idx];
 	u16 count, total = 0, totallen = 0;
 	u16 i, j, k;
 
@@ -80,6 +87,12 @@ static u16 build_config_descriptor(usbd_device *usbd_dev,
 				len -= count;
 				total += count;
 				totallen += ep->bLength;
+				memcpy(buf, ep->extra,
+						count = MIN(len, ep->extralen));
+				buf += count;
+				len -= count;
+				total += count;
+				totallen += ep->extralen;
 			}
 		}
 	}
@@ -235,31 +248,43 @@ static int usb_standard_set_interface(usbd_device *usbd_dev,
 				      struct usb_setup_data *req,
 				      u8 **buf, u16 *len)
 {
-	(void)usbd_dev;
-	(void)req;
+	u8 bNumInterfaces;
+	u8 num_altsetting;
+
 	(void)buf;
 
-	/* FIXME: Adapt if we have more than one interface. */
-	if (req->wValue != 0)
-		return 0;
+	bNumInterfaces = usbd_dev->config->bNumInterfaces;
+
+	if (req->wIndex >= bNumInterfaces)
+		return USBD_REQ_NOTSUPP;
+
+	num_altsetting = usbd_dev->config->interface[req->wIndex].num_altsetting;
+
+	if (req->wValue >= num_altsetting)
+		return USBD_REQ_NOTSUPP;
+
+	if (usbd_dev->config->interface[req->wIndex].cur_altsetting != req->wValue) {
+		usbd_dev->config->interface[req->wIndex].cur_altsetting = req->wValue;
+		if(usbd_dev->user_callback_set_altsetting)
+			usbd_dev->user_callback_set_altsetting(usbd_dev,
+		      		req->wIndex, req->wValue);
+	}
 	*len = 0;
 
-	return 1;
+	return USBD_REQ_HANDLED;
 }
 
 static int usb_standard_get_interface(usbd_device *usbd_dev,
 				      struct usb_setup_data *req,
 				      u8 **buf, u16 *len)
 {
-	(void)usbd_dev;
-	(void)req;
-	(void)buf;
+	if (req->wIndex >= usbd_dev->config->bNumInterfaces)
+		return USBD_REQ_NOTSUPP;
 
-	/* FIXME: Adapt if we have more than one interface. */
-	*len = 1;
-	(*buf)[0] = 0;
+	*len = sizeof(usbd_dev->config->interface[req->wIndex].cur_altsetting);
+	(*buf)[0] = usbd_dev->config->interface[req->wIndex].cur_altsetting;
 
-	return 1;
+	return USBD_REQ_HANDLED;
 }
 
 static int usb_standard_device_get_status(usbd_device *usbd_dev,
